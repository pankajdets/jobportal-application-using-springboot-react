pipeline {
    
     environment {
        
        dockerhub = credentials('docker-hub-credentials')
        dockerImage = ''
    }
    
    agent any 
    // agent is where my pipeline will be eexecuted
    tools {
        //install the maven version configured as m2 and add it to the path
        maven "m3"
    }
    stages {
        stage('pull from scm') {
            steps {
            git branch: 'main', credentialsId: 'gitlab-token', url: 'https://github.com/pankajdets/jobportal-backend.git'
            }
        }
        stage('mvn build') {
            steps {
            sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
            post {
                //if maven build was able to run the test we will create a test report and archive the jar in local machine
                success {
                    junit '**/target/surefire-reports/*.xml'
                    archiveArtifacts 'target/*.jar'
                }
            }
        }
        stage('checkstyle') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('checkstyle Report') {
            steps {
                recordIssues(tools: [checkStyle(pattern: 'target/checkstyle-result.xml')])
            }
        }
        stage('code coverage') {
            steps {
                jacoco()
            }
        }
        stage('sonar scanner') {
            steps {
           sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=jobportal-backend -Dsonar.host.url=http://20.231.13.149:9000 -Dsonar.login=sqa_62d3664ca18e389afdd6cefce0632ba64bc35c5d'
            }
        }
        stage ('Upload jar to Artifactory')  {
          steps {
          nexusArtifactUploader(
          nexusVersion: 'nexus3',
          protocol: 'http',
          nexusUrl: '20.120.117.186:8081',
          groupId: 'portal',
          version: '0.0.1-SNAPSHOT',
          repository: 'maven-snapshots',
          credentialsId: 'nexus-credentials',
          artifacts: [
            [artifactId: 'portal',
             classifier: '',
             file: 'target/portal-0.0.1-SNAPSHOT.jar',
             type: 'jar']
        ]
        )
          }
     }
     
        stage('docker image') {
            steps {
                script {
                    dockerImage=docker.build("springbootkuberimg","-f Dockerfile .")
                }
            }
        }
    
        stage('docker push on Dockerhub') {
            steps {
                
                sh "docker tag springbootkuberimg pankajdets/springbootkuberimg"
                
                sh 'echo $dockerhub_PSW | docker login -u $dockerhub_USR --password-stdin'
                
                sh "docker push pankajdets/springbootkuberimg"
                
            }
        }
        
        stage ('Deploy on AKS cluster'){

            steps{
                
               kubeconfig(caCertificate: '', credentialsId: 'aks-cred', serverUrl: 'https://aksdemo-dns-1650bf83.hcp.eastus.azmk8s.io:443') {
                  
                  sh "kubectl apply -f src/main/resources/mongo-config.yml"
                  sh "kubectl apply -f src/main/resources/mongo-secret.yml"
                  sh "kubectl apply -f src/main/resources/mongo-deployment.yml"
                  sh "kubectl apply -f src/main/resources/deployment.yml"
                  
            }}
            }
        
    }
}
